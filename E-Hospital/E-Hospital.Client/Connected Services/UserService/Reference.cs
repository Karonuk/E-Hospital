//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace E_Hospital.Client.UserService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="UserService.IDoctorService", CallbackContract=typeof(E_Hospital.Client.UserService.IDoctorServiceCallback))]
    public interface IDoctorService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDoctorService/LogInDoctor")]
        void LogInDoctor(E_Hospital.BLL.Data.DoctorDto doctor);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDoctorService/LogInDoctor")]
        System.Threading.Tasks.Task LogInDoctorAsync(E_Hospital.BLL.Data.DoctorDto doctor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDoctorService/GetScheduleForToday", ReplyAction="http://tempuri.org/IDoctorService/GetScheduleForTodayResponse")]
        E_Hospital.BLL.Data.VisitRequestDto[] GetScheduleForToday(E_Hospital.BLL.Data.DoctorDto doctor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDoctorService/GetScheduleForToday", ReplyAction="http://tempuri.org/IDoctorService/GetScheduleForTodayResponse")]
        System.Threading.Tasks.Task<E_Hospital.BLL.Data.VisitRequestDto[]> GetScheduleForTodayAsync(E_Hospital.BLL.Data.DoctorDto doctor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDoctorService/GetPendingRequests", ReplyAction="http://tempuri.org/IDoctorService/GetPendingRequestsResponse")]
        E_Hospital.BLL.Data.VisitRequestDto[] GetPendingRequests(E_Hospital.BLL.Data.DoctorDto doctor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDoctorService/GetPendingRequests", ReplyAction="http://tempuri.org/IDoctorService/GetPendingRequestsResponse")]
        System.Threading.Tasks.Task<E_Hospital.BLL.Data.VisitRequestDto[]> GetPendingRequestsAsync(E_Hospital.BLL.Data.DoctorDto doctor);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDoctorService/ChangeRequestState")]
        void ChangeRequestState(int visitRequestId, bool isApproved);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDoctorService/ChangeRequestState")]
        System.Threading.Tasks.Task ChangeRequestStateAsync(int visitRequestId, bool isApproved);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDoctorService/ReceiveVisitRequest")]
        void ReceiveVisitRequest(E_Hospital.BLL.Data.DoctorDto doctor, E_Hospital.BLL.Data.VisitRequestDto visitRequest);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDoctorService/ReceiveVisitRequest")]
        System.Threading.Tasks.Task ReceiveVisitRequestAsync(E_Hospital.BLL.Data.DoctorDto doctor, E_Hospital.BLL.Data.VisitRequestDto visitRequest);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDoctorService/LogoutDoctor")]
        void LogoutDoctor(E_Hospital.BLL.Data.DoctorDto doctor);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDoctorService/LogoutDoctor")]
        System.Threading.Tasks.Task LogoutDoctorAsync(E_Hospital.BLL.Data.DoctorDto doctor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDoctorService/GetDoctor", ReplyAction="http://tempuri.org/IDoctorService/GetDoctorResponse")]
        E_Hospital.BLL.Data.DoctorDto GetDoctor(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDoctorService/GetDoctor", ReplyAction="http://tempuri.org/IDoctorService/GetDoctorResponse")]
        System.Threading.Tasks.Task<E_Hospital.BLL.Data.DoctorDto> GetDoctorAsync(int userId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDoctorServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDoctorService/UpdatePendingRequests")]
        void UpdatePendingRequests(E_Hospital.BLL.Data.VisitRequestDto visitRequest);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDoctorServiceChannel : E_Hospital.Client.UserService.IDoctorService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DoctorServiceClient : System.ServiceModel.DuplexClientBase<E_Hospital.Client.UserService.IDoctorService>, E_Hospital.Client.UserService.IDoctorService {
        
        public DoctorServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public DoctorServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public DoctorServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public DoctorServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public DoctorServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void LogInDoctor(E_Hospital.BLL.Data.DoctorDto doctor) {
            base.Channel.LogInDoctor(doctor);
        }
        
        public System.Threading.Tasks.Task LogInDoctorAsync(E_Hospital.BLL.Data.DoctorDto doctor) {
            return base.Channel.LogInDoctorAsync(doctor);
        }
        
        public E_Hospital.BLL.Data.VisitRequestDto[] GetScheduleForToday(E_Hospital.BLL.Data.DoctorDto doctor) {
            return base.Channel.GetScheduleForToday(doctor);
        }
        
        public System.Threading.Tasks.Task<E_Hospital.BLL.Data.VisitRequestDto[]> GetScheduleForTodayAsync(E_Hospital.BLL.Data.DoctorDto doctor) {
            return base.Channel.GetScheduleForTodayAsync(doctor);
        }
        
        public E_Hospital.BLL.Data.VisitRequestDto[] GetPendingRequests(E_Hospital.BLL.Data.DoctorDto doctor) {
            return base.Channel.GetPendingRequests(doctor);
        }
        
        public System.Threading.Tasks.Task<E_Hospital.BLL.Data.VisitRequestDto[]> GetPendingRequestsAsync(E_Hospital.BLL.Data.DoctorDto doctor) {
            return base.Channel.GetPendingRequestsAsync(doctor);
        }
        
        public void ChangeRequestState(int visitRequestId, bool isApproved) {
            base.Channel.ChangeRequestState(visitRequestId, isApproved);
        }
        
        public System.Threading.Tasks.Task ChangeRequestStateAsync(int visitRequestId, bool isApproved) {
            return base.Channel.ChangeRequestStateAsync(visitRequestId, isApproved);
        }
        
        public void ReceiveVisitRequest(E_Hospital.BLL.Data.DoctorDto doctor, E_Hospital.BLL.Data.VisitRequestDto visitRequest) {
            base.Channel.ReceiveVisitRequest(doctor, visitRequest);
        }
        
        public System.Threading.Tasks.Task ReceiveVisitRequestAsync(E_Hospital.BLL.Data.DoctorDto doctor, E_Hospital.BLL.Data.VisitRequestDto visitRequest) {
            return base.Channel.ReceiveVisitRequestAsync(doctor, visitRequest);
        }
        
        public void LogoutDoctor(E_Hospital.BLL.Data.DoctorDto doctor) {
            base.Channel.LogoutDoctor(doctor);
        }
        
        public System.Threading.Tasks.Task LogoutDoctorAsync(E_Hospital.BLL.Data.DoctorDto doctor) {
            return base.Channel.LogoutDoctorAsync(doctor);
        }
        
        public E_Hospital.BLL.Data.DoctorDto GetDoctor(int userId) {
            return base.Channel.GetDoctor(userId);
        }
        
        public System.Threading.Tasks.Task<E_Hospital.BLL.Data.DoctorDto> GetDoctorAsync(int userId) {
            return base.Channel.GetDoctorAsync(userId);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="UserService.IPatientService", CallbackContract=typeof(E_Hospital.Client.UserService.IPatientServiceCallback))]
    public interface IPatientService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/GetVisitRequests", ReplyAction="http://tempuri.org/IPatientService/GetVisitRequestsResponse")]
        E_Hospital.BLL.Data.VisitRequestDto[] GetVisitRequests(E_Hospital.BLL.Data.PatientDto currentPatient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/GetVisitRequests", ReplyAction="http://tempuri.org/IPatientService/GetVisitRequestsResponse")]
        System.Threading.Tasks.Task<E_Hospital.BLL.Data.VisitRequestDto[]> GetVisitRequestsAsync(E_Hospital.BLL.Data.PatientDto currentPatient);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPatientService/SendVisitRequest")]
        void SendVisitRequest(E_Hospital.BLL.Data.VisitRequestDto visitRequest);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPatientService/SendVisitRequest")]
        System.Threading.Tasks.Task SendVisitRequestAsync(E_Hospital.BLL.Data.VisitRequestDto visitRequest);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPatientService/LogInPatient")]
        void LogInPatient(E_Hospital.BLL.Data.PatientDto patient);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPatientService/LogInPatient")]
        System.Threading.Tasks.Task LogInPatientAsync(E_Hospital.BLL.Data.PatientDto patient);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPatientService/LogOutPatient")]
        void LogOutPatient(E_Hospital.BLL.Data.PatientDto patient);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPatientService/LogOutPatient")]
        System.Threading.Tasks.Task LogOutPatientAsync(E_Hospital.BLL.Data.PatientDto patient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/GetPatient", ReplyAction="http://tempuri.org/IPatientService/GetPatientResponse")]
        E_Hospital.BLL.Data.PatientDto GetPatient(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/GetPatient", ReplyAction="http://tempuri.org/IPatientService/GetPatientResponse")]
        System.Threading.Tasks.Task<E_Hospital.BLL.Data.PatientDto> GetPatientAsync(int userId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPatientServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPatientService/UpdateRequestState")]
        void UpdateRequestState(E_Hospital.BLL.Data.VisitRequestDto visitRequest);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPatientServiceChannel : E_Hospital.Client.UserService.IPatientService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PatientServiceClient : System.ServiceModel.DuplexClientBase<E_Hospital.Client.UserService.IPatientService>, E_Hospital.Client.UserService.IPatientService {
        
        public PatientServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public PatientServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public PatientServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PatientServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PatientServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public E_Hospital.BLL.Data.VisitRequestDto[] GetVisitRequests(E_Hospital.BLL.Data.PatientDto currentPatient) {
            return base.Channel.GetVisitRequests(currentPatient);
        }
        
        public System.Threading.Tasks.Task<E_Hospital.BLL.Data.VisitRequestDto[]> GetVisitRequestsAsync(E_Hospital.BLL.Data.PatientDto currentPatient) {
            return base.Channel.GetVisitRequestsAsync(currentPatient);
        }
        
        public void SendVisitRequest(E_Hospital.BLL.Data.VisitRequestDto visitRequest) {
            base.Channel.SendVisitRequest(visitRequest);
        }
        
        public System.Threading.Tasks.Task SendVisitRequestAsync(E_Hospital.BLL.Data.VisitRequestDto visitRequest) {
            return base.Channel.SendVisitRequestAsync(visitRequest);
        }
        
        public void LogInPatient(E_Hospital.BLL.Data.PatientDto patient) {
            base.Channel.LogInPatient(patient);
        }
        
        public System.Threading.Tasks.Task LogInPatientAsync(E_Hospital.BLL.Data.PatientDto patient) {
            return base.Channel.LogInPatientAsync(patient);
        }
        
        public void LogOutPatient(E_Hospital.BLL.Data.PatientDto patient) {
            base.Channel.LogOutPatient(patient);
        }
        
        public System.Threading.Tasks.Task LogOutPatientAsync(E_Hospital.BLL.Data.PatientDto patient) {
            return base.Channel.LogOutPatientAsync(patient);
        }
        
        public E_Hospital.BLL.Data.PatientDto GetPatient(int userId) {
            return base.Channel.GetPatient(userId);
        }
        
        public System.Threading.Tasks.Task<E_Hospital.BLL.Data.PatientDto> GetPatientAsync(int userId) {
            return base.Channel.GetPatientAsync(userId);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="UserService.ICommonService")]
    public interface ICommonService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonService/GetSpecializations", ReplyAction="http://tempuri.org/ICommonService/GetSpecializationsResponse")]
        E_Hospital.BLL.Data.SpecializationDto[] GetSpecializations();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonService/GetSpecializations", ReplyAction="http://tempuri.org/ICommonService/GetSpecializationsResponse")]
        System.Threading.Tasks.Task<E_Hospital.BLL.Data.SpecializationDto[]> GetSpecializationsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonService/GetDoctors", ReplyAction="http://tempuri.org/ICommonService/GetDoctorsResponse")]
        E_Hospital.BLL.Data.DoctorDto[] GetDoctors();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonService/GetDoctors", ReplyAction="http://tempuri.org/ICommonService/GetDoctorsResponse")]
        System.Threading.Tasks.Task<E_Hospital.BLL.Data.DoctorDto[]> GetDoctorsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICommonServiceChannel : E_Hospital.Client.UserService.ICommonService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CommonServiceClient : System.ServiceModel.ClientBase<E_Hospital.Client.UserService.ICommonService>, E_Hospital.Client.UserService.ICommonService {
        
        public CommonServiceClient() {
        }
        
        public CommonServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CommonServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CommonServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CommonServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public E_Hospital.BLL.Data.SpecializationDto[] GetSpecializations() {
            return base.Channel.GetSpecializations();
        }
        
        public System.Threading.Tasks.Task<E_Hospital.BLL.Data.SpecializationDto[]> GetSpecializationsAsync() {
            return base.Channel.GetSpecializationsAsync();
        }
        
        public E_Hospital.BLL.Data.DoctorDto[] GetDoctors() {
            return base.Channel.GetDoctors();
        }
        
        public System.Threading.Tasks.Task<E_Hospital.BLL.Data.DoctorDto[]> GetDoctorsAsync() {
            return base.Channel.GetDoctorsAsync();
        }
    }
}
